<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use CalendR\Event\Provider\ProviderInterface;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository implements ProviderInterface
{
	public function getByDateInterval(\DateTime $from, \DateTime $to)
	{
		$qb = $this->createQueryBuilder('e');

		$qb
			->where(
				$qb->expr()->gte('e.end', '?1')
				)
			->andWhere(
				$qb->expr()->lte('e.begin', '?2')
				)
			->orderBy('e.begin')
			->setParameters(
				array(
					1 => $from,
					2 => $to,
					)
				);

		return $qb->getQuery()->getResult();
	}

	public function getEvents(\DateTime $begin, \DateTime $end, array $options = array())
	{
		$qb = $this->createQueryBuilder('e');

		$qb
			->where(
				$qb->expr()->orX(
					$qb->expr()->andX(
						$qb->expr()->gte('e.begin', ':begin'),
						$qb->expr()->lt('e.begin', ':end')
						),
					$qb->expr()->andX(
						$qb->expr()->gt('e.end', ':begin'),
						$qb->expr()->lte('e.end', ':end')
						),
					$qb->expr()->andX(
						$qb->expr()->gte('e.begin', ':begin'),
						$qb->expr()->lte('e.end', ':end')
						),
					$qb->expr()->andX(
						$qb->expr()->lte('e.begin', ':begin'),
						$qb->expr()->lte('e.end', ':end')
						)
					)
				)
			->setParameters(
				array(
					'begin' => $begin,
					'end'   => $end,
					)
				);

		return $qb->getQuery()->getResult();
	}
}
